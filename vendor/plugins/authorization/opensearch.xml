

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <title>DocSavage's rails-authorization-plugin at master &mdash; GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="http://github.com/fluidicon.png" title="GitHub" />

    
      <link href="/stylesheets/bundle.css?4f7f64d71fe9ff42736286faafa81a174f8b673a" media="screen" rel="stylesheet" type="text/css" />
    

    
      
        <script src="/javascripts/bundle.js?4f7f64d71fe9ff42736286faafa81a174f8b673a" type="text/javascript"></script>
      
    
    
  
    
  


  <link href="http://github.com/feeds/DocSavage/commits/rails-authorization-plugin/master" rel="alternate" title="Recent Commits to rails-authorization-plugin:master" type="application/atom+xml" />


    
  </head>

  

  <body>
    
    
    <div id="main">
      <div id="header" class="">
        <div class="site">
          <div class="logo">
            <a href="/"><img src="/images/modules/header/logo.png" alt="git-hub" /></a>
          </div>
          
            <div class="actions">
              <a href="/">Home</a>
              <a href="/plans"><b><u>Pricing and Signup</u></b></a>
              <a href="/repositories">Repositories</a>
              <a href="/news">News</a>
              <a href="/login">Login</a>
            </div>
          
        </div>
      </div>
      
      
        
  <div id="repo_menu">
    <div class="site">
      <ul>
        
          <li class="active"><a href="/DocSavage/rails-authorization-plugin/tree/master">Source</a></li>

          <li class=""><a href="/DocSavage/rails-authorization-plugin/commits/master">Commits</a></li>

          <li class=""><a href="/DocSavage/rails-authorization-plugin/info/feed">Info</a></li>

          <li class=""><a href="/DocSavage/rails-authorization-plugin/wikis">Wiki (1)</a></li>

          <li class=""><a href="/DocSavage/rails-authorization-plugin/network">Network (11)</a></li>

          

        
      </ul>
    </div>
  </div>

  <div id="repo_sub_menu">
    <div class="site">
      <div class="joiner"></div>
      

      

      
        <ul>
          <li>
            <a class="active" href="/DocSavage/rails-authorization-plugin/tree/3dd9bc84164d90e2dace17fdc8b25ac59f97f7a6">master</a>
          </li>
          <li>
            <a href="#">all branches</a>
            <ul>
              
                <li><a href="/DocSavage/rails-authorization-plugin/tree/master">master</a></li>
              
            </ul>
          </li>
          <li>
            <a href="#">all tags</a>
            
              <ul>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.9">v1.0.9</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.8">v1.0.8</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.7">v1.0.7</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.6">v1.0.6</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.4">v1.0.4</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.3">v1.0.3</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.2">v1.0.2</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.10">v1.0.10</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.1">v1.0.1</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/v1.0.0">v1.0.0</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/first_rails_2_targeted_release">first_rails_2_targeted_release</a></li>
                
                  <li><a href="/DocSavage/rails-authorization-plugin/tree/final_rails_1.2.x_compatible_release">final_rails_1.2.x_compatible_release</a></li>
                
              </ul>
            
          </li>
        </ul>

      
    </div>
  </div>

  <div class="site">
    

<div id="repos">
  


<div class="repo public">
  <div class="title">
    <div class="path">
      <a href="/DocSavage">DocSavage</a> / <b><a href="/DocSavage/rails-authorization-plugin/tree">rails-authorization-plugin</a></b>

      

        

        
          

          
            
            <a href="/signup"><img alt="fork" class="button" src="/images/modules/repos/fork_button.png?4f7f64d71fe9ff42736286faafa81a174f8b673a" /></a> 
          
        

        <a href="/signup" class="toggle_watch"><img alt="watch" class="button" src="/images/modules/repos/watch_button.png?4f7f64d71fe9ff42736286faafa81a174f8b673a" /></a><a href="/signup" class="toggle_watch" style="display:none;"><img alt="watch" class="button" src="/images/modules/repos/unwatch_button.png?4f7f64d71fe9ff42736286faafa81a174f8b673a" /></a>

        
          <a href="/DocSavage/rails-authorization-plugin/tarball/master" id="download_button" rel="/DocSavage/rails-authorization-plugin/downloads/master"><img alt="download tarball" class="button" src="/images/modules/repos/download_button.png?4f7f64d71fe9ff42736286faafa81a174f8b673a" /></a> 
        
      
    </div>

    <div class="security private_security" style="display:none">
      <a href="#private_repo" rel="facebox"><img src="/images/icons/private.png" alt="private" /></a>
    </div>

    <div id="private_repo" class="hidden">
      This repository is private.  
      All pages are served over SSL and all pushing and pulling is done over SSH.
      No one may fork, clone, or view it unless they are added as a <a href="/DocSavage/rails-authorization-plugin/edit/collaborators">member</a>.

      <br/>
      <br/>
      Every repository with this icon (<img src="/images/icons/private.png" alt="private" />) is private.
    </div>

    <div class="security public_security" style="">
      <a href="#public_repo" rel="facebox"><img src="/images/icons/public.png" alt="public" /></a>
    </div>

    <div id="public_repo" class="hidden">
      This repository is public.
      Anyone may fork, clone, or view it.

      <br/>
      <br/>
      Every repository with this icon (<img src="/images/icons/public.png" alt="public" />) is public.
    </div>

    

    
  </div>
  <div class="meta">
    <table>
      
      
        <tr>
          <td class="label">Description:</td>
          <td>
            <span id="repository_description" rel="/DocSavage/rails-authorization-plugin/edit/update" class="">This plugin provides a flexible way to add authorization to Rails. </span> 
            
          </td>
        </tr>
      
      
        <tr>
          <td class="label">Homepage:</td>
          <td>
            
              <a href="http://www.writertopia.com/developers/authorization">http://www.writertopia.com/developers/authorization</a> 
            
          </td>
        </tr>
      
      
        <tr>
          <td class="label">Clone&nbsp;URL:</td>
          
          <td>
            <a href="git://github.com/DocSavage/rails-authorization-plugin.git" class="git_url_facebox" rel="#git-clone">git://github.com/DocSavage/rails-authorization-plugin.git</a>
            <div id="git-clone" style="display:none;">
              Give this clone URL to anyone.
              <br/>
              <code>git clone git://github.com/DocSavage/rails-authorization-plugin.git </code>
            </div>
          </td>
        </tr>
      
      
      
      <tr>
        <td class="label">Search Repo:</td>
        <td>
          <form action="/DocSavage/rails-authorization-plugin/search" method="get">
            <input type="text" name="q" value="" /> <select name="choice"><option value="code">Code</option><option value="grep">Commit Messages</option><option value="author">Author</option><option value="committer">Committer</option></select>
            <input type="submit" value="Go" />
          </form>
        </td>
      </tr>
    </table>
    
      </div>
</div>

</div>

<div id="commit">
  <div class="group">
    <div class="envelope commit">
  <div class="human">
    
      <div class="message"><pre><a href="/DocSavage/rails-authorization-plugin/commit/3dd9bc84164d90e2dace17fdc8b25ac59f97f7a6">Performance enhancement for method model#users</a> </pre></div>
    

    <div class="actor">
      <div class="gravatar">
        
        <img alt="" height="30" src="http://www.gravatar.com/avatar/a31c2c26350e9e2b07fbd99fbd5ff520?s=30&amp;d=http%3A%2F%2Fgithub.com%2Fimages%2Fgravatars%2Fgravatar-30.png" width="30" />
      </div>
      <div class="name"><a href="/lawrencepit">lawrencepit</a> <span>(author)</span></div>
        <div class="date">
          <abbr class="relatize" title="2008-07-14 01:23:16">Mon Jul 14 01:23:16 -0700 2008</abbr> 
        </div>
    </div>

    

  </div>
  <div class="machine">
    <span>c</span>ommit&nbsp;&nbsp;<a href="/DocSavage/rails-authorization-plugin/commit/3dd9bc84164d90e2dace17fdc8b25ac59f97f7a6" hotkey="c">3dd9bc84164d90e2dace17fdc8b25ac59f97f7a6</a><br />
    <span>t</span>ree&nbsp;&nbsp;&nbsp;&nbsp;<a href="/DocSavage/rails-authorization-plugin/tree/3dd9bc84164d90e2dace17fdc8b25ac59f97f7a6/authorization" hotkey="t">6d39d27581c9498bc4122ac41eff0c633d68c55d</a><br />

    
      <span>p</span>arent&nbsp;
      
      <a href="/DocSavage/rails-authorization-plugin/tree/1fed21c02cd29e1059215bcbbe9729b62f8fc4f3/authorization" hotkey="p">1fed21c02cd29e1059215bcbbe9729b62f8fc4f3</a>
    

  </div>
</div>

  </div>
</div>



  
    <div id="path">
      <b><a href="/DocSavage/rails-authorization-plugin/tree">rails-authorization-plugin</a></b> / authorization
    </div>

    
      
<div id="browser"> 
  <table cellpadding="0" cellspacing="0">
    <tr>
      <th></th>
      <th>name</th>
      <th>age</th>
      <th>
        <div class="history">
          <a href="/DocSavage/rails-authorization-plugin/commits/master/authorization">history</a>
        </div>
        message
      </th>
    </tr>

    
      <tr class="alt">
        <td> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master">..</a> </td>
        <td> </td>
        <td> </td>
      </tr>
    

    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/CHANGELOG.txt">CHANGELOG.txt</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="alt">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/MIT-LICENSE">MIT-LICENSE</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/README.rdoc">README.rdoc</a> </td>
        <td> <span class="relatize">Wed May 28 12:33:41 -0700 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/66e6dda5d929586bf2ac4b3eb9ecaef11b21ba41" class="message">Updated info for developers.</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="alt">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/README_developers.txt">README_developers.txt</a> </td>
        <td> <span class="relatize">Wed May 28 12:33:41 -0700 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/66e6dda5d929586bf2ac4b3eb9ecaef11b21ba41" class="message">Updated info for developers.</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/Rakefile">Rakefile</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="alt">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/about.yml">about.yml</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/dir.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/doc">doc/</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="alt">
        <td class="icon"> <img alt="folder" src="/images/icons/dir.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/generators">generators/</a> </td>
        <td> <span class="relatize">Wed May 28 12:15:08 -0700 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/45ad5ae2ff9d427df5f7255731e90388a265765c" class="message">Remove file which contains info already present...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/init.rb">init.rb</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="alt">
        <td class="icon"> <img alt="folder" src="/images/icons/txt.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/install.rb">install.rb</a> </td>
        <td> <span class="relatize">Tue May 13 00:21:50 -0700 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/a4532a4518bc882f8fa36d89dce99fb9337f669e" class="message">install.rb pointed to the wrong file: README.tx...</a> [<a href="/mrflip">mrflip</a>] </td>
      </tr>
    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/dir.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/lib">lib/</a> </td>
        <td> <span class="relatize">Mon Jul 14 01:23:16 -0700 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/3dd9bc84164d90e2dace17fdc8b25ac59f97f7a6" class="message">Performance enhancement for method model#users</a> [<a href="/lawrencepit">lawrencepit</a>] </td>
      </tr>
    
      <tr class="alt">
        <td class="icon"> <img alt="folder" src="/images/icons/dir.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/tasks">tasks/</a> </td>
        <td> <span class="relatize">Fri Feb 29 00:24:39 -0800 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/8eb6104bd112610d5726f84f35807d3288e6cfd0" class="message">Moved all plugin code under the 'authorization'...</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
      <tr class="">
        <td class="icon"> <img alt="folder" src="/images/icons/dir.png?7147bbf2ac978d79fa4c8e07098e3f82b1d68aa0" /> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/tree/master/authorization/test">test/</a> </td>
        <td> <span class="relatize">Wed May 28 12:33:41 -0700 2008</span> </td>
        <td> <a href="/DocSavage/rails-authorization-plugin/commit/66e6dda5d929586bf2ac4b3eb9ecaef11b21ba41" class="message">Updated info for developers.</a> [<a href="/grempe">grempe</a>] </td>
      </tr>
    
  </table>
</div>

<div id="readme"><span class="name">README.rdoc</span><div class="wikistyle"><h1>Authorization plugin</h1>
<p>
This plugin provides a flexible way to add authorization to Rails.
</p>
<p>
The authorization process decides whether a user is allowed access to some
feature. It is distinct from the authentication process, which tries to
confirm a user is authentic, not an imposter. There are many authentication
systems available for Rails, e.g., acts_as_authenticated and LoginEngine.
This authorization system will play nicely with them as long as some simple
requirements are met:
</p>
<ol>
<li>User objects are available that implement a has_role?(role,
authorizable_object = nil) method. This requirement can be easily handled
by using acts_as_authorized_user in the User-like class.

</li>
<li>If you want to use &quot;role of model&quot; authorization expressions,
like &quot;owner of resource&quot; or &quot;eligible for :award&quot;, then
your models with roles must implement an accepts_role?(role, user) method.
This requirement can be handled by using acts_as_authorizable in the model
class.

</li>
</ol>
<p>
The authorization plugin provides the following:
</p>
<ul>
<li>A simple way of checking authorization at either the class or instance
method level using #permit and #permit?

</li>
<li>Authorization using roles for the entire application, a model class, or an
instance of a model (i.e., a particular object).

</li>
<li>Some english-like dynamic methods that draw on the defined roles. You will
be able to use methods like &quot;user.is_fan_of angelina&quot; or
&quot;angelina.has_fans?&quot;, where a &#8216;fan&#8217; is only defined
in the roles table.

</li>
<li>Pick-and-choose a mixin for your desired level of database complexity. For
all the features, you will want to use &quot;object roles table&quot; (see
below)

</li>
</ul>
<h2>Example Usage</h2>
<pre>
  class MeetingController &amp;lt; ApplicationController

    permit &quot;rubyists and wanna_be_rubyists&quot;, :except =&gt; :public_page

    def public_page
      render :text =&gt; &quot;We're all in Chicago&quot;
    end

    def secret_info
      permit &quot;interested in Answers and (matz or dhh)&quot; do
        render :text =&gt; &quot;The Answer = 42&quot;
      end
    end

    def find_apprentice
      @founder = User.find_by_name('matz')
      permit &quot;'inner circle' of :founder&quot; do
        if request.post?
          apprentice = User.find_by_skillset(params[:uber_hacker])
          ruby_community = Group.find_by_name('Ruby')
          ruby_community.accepts_role 'yarv_builder', apprentice
        end
      end
    end

    def rails_conf
      @meeting = Meeting.find_by_name('RailsConf')
      permit &quot;attendees of :meeting or swedish_mensa_supermodels&quot; do
        venue = Hotel.find_by_name(&quot;Wyndham O'Hare&quot;)
        current_user.is_traveller_to venue
        if permit? &quot;traveller to :venue and not speaker&quot;
          Partay.all_night_long
          @misdeeds = current_user.is_participant_in_what
        end
      end
    end

  end
</pre>
<h2>Installation</h2>
<p>
Installation of the Authorization plugin is quick and easy.
</p>
<h3>Step 1</h3>
<p>
Open a terminal and change directory to the root of your Ruby on Rails
application referred to here as &#8216;RAILS_ROOT&#8217;. You can choose to
install the plugin using the standard Ruby on Rails tools (recommended), as
a Git sub-module, or by grabbing a tarball.
</p>
<h3>Step 2a (Standard install, recommended)</h3>
<p>
Run the following command in your RAILS_ROOT:
</p>
<pre>
  ./script/plugin install http://rails-authorization-plugin.googlecode.com/svn/trunk/authorization
</pre>
<p>
This will install the latest version of the plugin from SVN trunk into your
RAILS_ROOT/vendor/plugins/authorization directory.
</p>
<h3>Step 2b (Alternative install using Git sub-module, for advanced users of the Git SCM)</h3>
<p>
The source code for this plugin is maintained in a Git SCM repository. The
Git repository will always have the latest version of the code.
</p>
<p>
You can install the plugin using Git sub-modules (which are akin to using
SVN externals). Installing this way allows you to update the plugin code
later if needed (but note that it will not update any generated code
created earlier by this plugin such as migrations, which you will need to
update manually). Also note that if you are deploying your code using
Capistrano this method may cause issues if you are not careful (e.g. the
code will be deployed but the sub-modules will not be updated or installed
at all).
</p>
<p>
From your RAILS_ROOT directory run:
</p>
<pre>
  git submodule add git://github.com/DocSavage/rails-authorization-plugin.git vendor/plugins/authorization
</pre>
<p>
You should be able to update this plugin in the future with the simple
command (again from RAILS_ROOT):
</p>
<pre>
  git submodule update
</pre>
<h3>Step 2c (Alternative manual install from tarball)</h3>
<p>
If you like to install the old school manual way, feel free to download a
copy of the plugin code from:
</p>
<p>
http://github.com/docsavage/rails-authorization-plugin/tarball/master
</p>
<p>
Once downloaded, you can unpack that file in your RAILS_ROOT/vendor/plugins
directory.
</p>
<h2>Configuration</h2>
<p>
These instructions will show you how to do the initial configuration of the
plugin.
</p>
<h3>Choose a Mixin Type</h3>
<h4>Hardwired Roles</h4>
<p>
This is the simplest way to use the plugin and requires no database. Roles
are assumed to be coded into the Model classes using the
<tt>has_role?(role, obj = nil)</tt> method. This method is however more
limited in the functionality available to you.
</p>
<h4>Object Roles (Recommended, DB Required)</h4>
<p>
The Object Roles Table mixin provides full support for authorization
expressions within a database by add a polymorphic field to the Role table.
Because roles have polymorphic associations to an authorizable object, we
can assign a user to a role for any model instance. So you could declare
user X to be a moderator for workshop Y, or you could make user A be the
owner of resource B.
</p>
<p>
The identity module adds a number of dynamic methods that use defined
roles. The user-like model gets methods like `user.is_moderator_of group
(sets user to &quot;moderator&quot; of group`), user.is_moderator? (returns
true/false if user has some role &quot;moderator&quot;), and
group.has_moderators (returns an array of users that have role
&quot;moderator&quot; for the group). If you prefer not to have these
dynamic methods available, you can simply comment out the inclusion of the
identity module within object_roles_table.rb.
</p>
<h3>Initial Configuration Instructions</h3>
<p>
Choose one of the installation types identified above and make sure your
application provides a current_user method or something that returns the
current user object (resful_authentication provides this out of the box).
</p>
<p>
At the top of your RAILS_ROOT/config/environment.rb file add something like
the following (customized for your controllers and actions of course):
</p>
<pre>
  ...

  # Authorization plugin for role based access control
  # You can override default authorization system constants here.

  # Can be 'object roles' or 'hardwired'
  AUTHORIZATION_MIXIN = &quot;object roles&quot;

  # NOTE : If you use modular controllers like '/admin/products' be sure
  # to redirect to something like '/sessions' controller (with a leading slash)
  # as shown in the example below or you will not get redirected properly
  #
  # This can be set to a hash or to an explicit path like '/login'
  #
  LOGIN_REQUIRED_REDIRECTION = { :controller =&gt; '/sessions', :action =&gt; 'new' }
  PERMISSION_DENIED_REDIRECTION = { :controller =&gt; '/home', :action =&gt; 'index' }

  # The method your auth scheme uses to store the location to redirect back to
  STORE_LOCATION_METHOD = :store_location

  # standard rails config below here
  Rails::Initializer.run do |config|

  ...
</pre>
<ul>
<li>Set the AUTHORIZATION_MIXIN constant to object roles or hardwired. (See
init.rb in this plugin for how the role support is mixed in.)

</li>
<li>Set the LOGIN_REQUIRED_REDIRECTION to match the path or a hash with the
:controller and :action for your applications login page.

</li>
<li>Set the PERMISSION_DENIED_REDIRECTION to match the path or a hash with the
:controller and :action for your applications permission denied page.

</li>
<li>Set the STORE_LOCATION_METHOD to the method your application uses for
storing the current URL that the user should return to after authentication
(e.g. store_location).

</li>
<li>See the PLUGIN_DIR\lib\authorization.rb file for the default values of
LOGIN_REQUIRED_REDIRECTION, PERMISSION_DENIED_REDIRECTION and
STORE_LOCATION_METHOD.

</li>
</ul>
<h3>Create the database tables</h3>
<p>
If you plan to use the object roles method you will need to setup a few
database tables. We have provided a database migration file (Rails 2.0+
compatible) that will make this process easy for you. If you plan to use
the hardwired mixin, no extra database tables are required. and you can
skip to the next step.
</p>
<p>
Run the following command from your RAILS_ROOT (Note : The generator takes
a model name as its argument, which at this time must be
&#8216;Role&#8217;.):
</p>
<pre>
  ./script/generate role_model Role
</pre>
<p>
This will create:
</p>
<pre>
  Model:      RAILS_ROOT/app/models/role.rb
  Test:       RAILS_ROOT/test/unit/role_test.rb
  Fixtures:   RAILS_ROOT/test/fixtures/roles.yml
  Migration:  RAILS_ROOT/db/migrate/###_add_role.rb
</pre>
<p>
And now you will need to run a database migration from your RAILS_ROOT:
</p>
<pre>
  rake db:migrate
</pre>
<h3>Jumpstarting with a mixin</h3>
<p>
Now we need to add the methods needed by each of your models that will
participate in role based authorization. Typically these models fall into
two categories, the User model, and all other models that will have roles
available for use.
</p>
<p>
For a typical installation you would add both mixins to your User model.
</p>
<pre>
  class User &amp;lt; ActiveRecord::Base

    # Authorization plugin
    acts_as_authorized_user
    acts_as_authorizable

  ...
</pre>
<p>
Then in each additional model that you want to be able to restrict based on
role you would add just the acts_as_authorizable mixin like this:
</p>
<pre>
  class Event &amp;lt; ActiveRecord::Base

    acts_as_authorizable

  ...
</pre>
<p>
You are done with the configuration!
</p>
<h2>The Specifics</h2>
<h3>permit and permit?</h3>
<p>
permit and permit? take an authorization expression and a hash of options
that typically includes any objects that need to be queried:
</p>
<pre>
  permit  [, options hash ]
  permit?  [, options hash ]
</pre>
<p>
The difference between permit and permit? is redirection. permit is a
declarative statement and redirects by default. It can also be used as a
class or an instance method, gating the access to an entire controller in a
before_filter fashion.
</p>
<p>
permit? is only an instance method, can be used within expressions, does
not redirect by default.
</p>
<p>
The authorization expression is a boolean expression made up of permitted
roles, prepositions, and authorizable models. Examples include
&quot;admin&quot; (User model assumed), &quot;moderator of :workshop&quot;
(looks at options hash and then @workshop), &quot;&#8217;top
salesman&#8217; at :company&quot; (multiword roles delimited by single
quotes), or &quot;scheduled for Exam&quot; (queries class method of Exam).
</p>
<p>
Note that we can use several permitted prepositions (&#8216;of&#8217;,
&#8216;for&#8217;, &#8216;in&#8217;, &#8216;on&#8217;, &#8216;to&#8217;,
&#8216;at&#8217;, &#8216;by&#8217;). In the discussion below, we assume you
use the &quot;of&quot; preposition. You can modify the permitted
prepositions by changing the constant in Authorization::Base::Parser.
</p>
<ul>
<li>If a specified role has no &quot;of &quot; designation, we assume it is a
user role (i.e., the model is the user-like object).

</li>
<li>If an &quot;of model&quot; designation is given but no &quot;model&quot;
key/value is supplied in the hash, we check if an instance variable @model
if it&#8217;s available.

</li>
<li>If the model is capitalized, we assume it&#8217;s a class and query
<tt>Model#self.accepts_role?</tt> (the class method) for the permission.
(Currently only available in ObjectRolesTable mixin.)

</li>
</ul>
<p>
For each role, a query is sent to the appropriate model object.
</p>
<p>
The grammar for the authorization expression is:
</p>
<pre>
          ::= () | not  |  or  |  and  |
          ::=  |
   ::= of | for | in | on | to | at | by
         ::= /:*\w+/
          ::= /\w+/ | /'.*'/
</pre>
<p>
Parentheses should be used to clarify permissions. Note that you may prefix
the model with an optional &quot;:&quot; &#8212; the first versions of
Authorization plugin made this mandatory but it&#8217;s now optional since
the mandatory preposition makes models unambiguous.
</p>
<h4>Options</h4>
<pre>
  :allow_guests =&gt; false.
</pre>
<p>
We can allow permission processing without a current user object. The
default is false.
</p>
<pre>
  :user =&gt; YourUserObject.
</pre>
<p>
The name of your user object.
</p>
<pre>
  :get_user_method =&gt; method_name
</pre>
<p>
The method name provided should return a user object. Default is
#current_user, which is the how acts_as_authenticated works.
</p>
<pre>
  :only =&gt; [ :method1, :method2 ]
</pre>
<p>
Array of methods to apply permit (not valid when used in instance methods)
</p>
<pre>
  :except =&gt; [ :method1, :method2 ]
</pre>
<p>
Array of methods that won&#8217;t have permission checking (not valid when
used in instance methods)
</p>
<pre>
  :redirect =&gt; boolean
</pre>
<p>
Default is true. If false, permit will not redirect to denied page.
</p>
<pre>
  :login_required_redirection =&gt; path or hash

  default is &quot;{ :controller =&gt; 'session', :action =&gt; 'new' }&quot;
</pre>
<p>
Path or Hash where user will be redirected if not logged in ()
</p>
<pre>
  :login_required_message =&gt; 'my message'
</pre>
<p>
A string to present to your users when login is required. Default is
&#8216;Login is required to access the requested page.&#8217;
</p>
<pre>
  :permission_denied_redirection =&gt; path or hash
</pre>
<p>
Path or Hash where user will be redirected if logged in but not authorized
(default is &#8217;&#8217;)
</p>
<pre>
  :permission_denied_message =&gt; 'my message'
</pre>
<p>
Message that will be presented to the user when permission is denied.
Default is &#8216;Permission denied. You cannot access the requested
page.&#8217;
</p>
<h3>Setting and getting the roles</h3>
<p>
Roles are set by #has_role and #accepts_role methods that are mixed into
the User-like object and the authorizable models. User objects can set
roles and optionally an object scope for that role:
</p>
<pre>
  user.has_role 'site_admin'
  user.has_role 'moderator', group
  user.has_no_role 'site_admin'
  user.has_no_role 'moderator', group
  user.has_role 'member', Group
</pre>
<p>
Note that the last method sets role &quot;member&quot; on a class
&quot;Group&quot;. Roles can be set with three scopes: entire application
(no class or object specified), a model class, or an instance of a model
(i.e., a model object).
</p>
<p>
Models set roles for specific users:
</p>
<pre>
  a_model.accepts_role 'moderator', user
  a_model.accepts_no_role 'moderator', user
  Model.accepts_role 'class moderator', user
</pre>
<p>
The method language has been chosen to aid memory of the argument order. A
user has a role &quot;foo&quot;, so the role string immediately follows
has_role. Similarly, a model accepts a role &quot;foo&quot;, so the role
string immediately follows accepts_role. Then we append the scope.
</p>
<p>
Sometimes the user-like object might be an authorizable object as well, for
example, when you allow &#8216;friend&#8217; roles for users. In this case,
the user-like object can be declared to be <tt>acts_as_authorizable</tt> as
well as <tt>acts_as_authorized_user</tt>.
</p>
<p>
Role queries follow the same pattern as the setting of roles:
</p>
<pre>
  user.has_role? 'moderator'
  user.has_role? 'moderator', group
  user.has_role? 'member', Group

  a_model.accepts_role? 'moderator', user
  Model.accepts_role? 'moderator', user
</pre>
<p>
When a user is queried without specifying either a model class or object,
it returns true if the user has <b>any</b> matching role. For example,
<tt>user.has_role? &#8216;moderator&#8217;</tt> returns true if the user is
&#8216;moderator&#8217; of a class, a model object, or just a generic
&#8216;moderator&#8217;. Note that if you say <tt>user.has_role
&#8216;moderator&#8217;</tt>, the user does not become
&#8216;moderator&#8217; for all classes and model objects; the user simply
has a generic role &#8216;moderator&#8217;.
</p>
<h4>Dynamic methods through the Identity mixin</h4>
<p>
The Object Roles Table version includes some dynamic methods that use the
roles table. For example, if you have roles like &quot;eligible&quot;,
&quot;moderator&quot;, and &quot;owner&quot;, you&#8217;ll be able to use
the following:
</p>
<pre>
  user.is_eligible_for_what   --&gt; returns array of authorizable objects for which user has role &quot;eligible&quot;
  user.is_moderator_of? group --&gt; returns true/false
  user.is_moderator_of group  --&gt; sets user to have role &quot;moderator&quot; for object group.
  user.is_administrator       --&gt; sets user to have role &quot;administrator&quot; not really tied to any object.
</pre>
<p>
Models get has_* methods:
</p>
<pre>
  group.has_moderators  --&gt; returns array of users with role &quot;moderator&quot; on that group
  group.has_moderators? --&gt; returns true/false
</pre>
<p>
Allowed prepositions are optional in the above dynamic methods. They are
simply syntactic sugar. For example, the following are equivalent:
</p>
<pre>
  user.is_member_of group
  user.is_member_for group
  user.is_member group
</pre>
<p>
Allowed prepositions are required in the authorization expressions because
they are used to distinguish &quot;role&quot; and &quot;role of
:model&quot; and &quot;role of Model&quot;.
</p>
<p>
If you prefer not to pollute your namespace with these dynamic methods, do
not include the Identity module in <tt>object_roles_table.rb</tt>.
</p>
<h3>Pattern of use</h3>
<p>
We expect the application to provide the following methods:
</p>
<h4>#current_user</h4>
<p>
Returns some user object, like an instance of my favorite class,
<tt>UserFromMars</tt>. A <tt>user</tt> object, from the Authorization
viewpoint, is simply an object that provides a <tt>has_role?</tt> method.
</p>
<p>
Note that duck typing means we don&#8217;t care what else the
<tt>UserFromMars</tt> might be doing. We only care that we can get an id
from whatever it is, and we can check if a given role string is associated
with it. By using <tt>acts_as_authorized_user</tt>, we inject what we need
into the user object.
</p>
<p>
If you use an authorization expression &quot;admin of :foo&quot;, we check
permission by asking <tt>foo</tt> if it
<tt>accepts_role?(&#8216;admin&#8217;, user)</tt>. So for each model that
is used in an expression, we assume that it provides the
<tt>accepts_role?(role, user)</tt> method.
</p>
<p>
Note that <tt>user</tt> can be <tt>nil</tt> if <tt>:allow_guests =&gt;
true</tt>.
</p>
<h4>#store_location (optional)</h4>
<p>
This method will be called if authorization fails and the user is about to
be redirected to the login action. This allows the application to return to
the desired page after login. If the application doesn&#8217;t provide this
method, the method will not be called.
</p>
<p>
The name of the method for storing a location can be modified by changing
the constant STORE_LOCATION_METHOD in environment.rb. Also, the default
login and permission denied pages are defined by the constants
LOGIN_REQUIRED_REDIRECTION and PERMISSION_DENIED_REDIRECTION in
authorization.rb and can be overriden in your environment.rb.
</p>
<h3>Conventions</h3>
<p>
Roles specified without the &quot;of model&quot; designation:
</p>
<ol>
<li>We see if there is a <tt>current_user</tt> method available that will
return a user object. This method can be overridden with the <tt>:user</tt>
hash.

</li>
<li>Once a user object is determined, we pass the role to
<tt>user.has_role?</tt> and expect a true return value if the user has the
given role.

</li>
</ol>
<p>
Roles specified with &quot;of model&quot; designation:
</p>
<ol>
<li>We attempt to query an object in the options hash that has a matching key.
Example: <tt>permit &quot;knight for justice&quot;, :justice =&gt;
@abstract_idea</tt>

</li>
<li>If there is no object with a matching key, we see if there&#8217;s a
matching instance variable. Example: @meeting defined before we use
<tt>permit &quot;moderator of meeting&quot;</tt>

</li>
<li>Once the model object is determined, we pass the role and user (determined
in the manner above) to <tt>model.accepts_role?</tt>

</li>
</ol>
<h2>Developers Note : Contributing Patches</h2>
<p>
Please see the file README_developers.txt for the methods we would like you
to use to submit new code features, bugfixes and patches.
</p>
</div></div>

    
  


  </div>

      
      
      <div class="push"></div>
    </div>
    
    <div id="footer">
      <div class="site">
        <div class="info">
          <div class="links">
            <a href="http://github.com/blog"><strong>Blog</strong></a> |
            <a href="http://groups.google.com/group/github/">Google Group</a> | 
            <a href="http://logicalawesome.lighthouseapp.com/projects/8570/home">Report a Bug</a> |
            <a href="http://logicalawesome.lighthouseapp.com/projects/8570/home">Request a Feature</a> |
            <a href="mailto:support@github.com">Contact</a> | 
            <a href="http://github.wordpress.com">Status</a>
          </div>
          <div class="company">
            <span id="_rrt" title="0.46001s from github.com">GitHub</span>
            is <a href="http://logicalawesome.com/">Logical Awesome</a> | &copy;2008 | <a href="/site/terms">Terms of Service</a> | <a href="/site/privacy">Privacy Policy</a>
          </div>
        </div>
        <div class="sponsor">
          <a href="http://engineyard.com">Hosting provided by</a>&nbsp;
          <a href="http://engineyard.com">
            <img src="/images/modules/footer/engine_yard_logo.gif" alt="Hosted by Engine Yard" />
          </a>
        </div>
      </div>
    </div>
    
    <div id="coming_soon" style="display:none;">
      This feature is coming soon.  Sit tight!
    </div>
        <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script>
    <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-3769691-2");
    pageTracker._initData();
    pageTracker._trackPageview();
    </script>

  </body>
</html>

